import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as ɵngcc0 from '@angular/core';
var AppCenterAnalytics = /** @class */ (function (_super) {
    __extends(AppCenterAnalytics, _super);
    function AppCenterAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterAnalytics.prototype.trackEvent = function (eventName, properties) { return cordova(this, "trackEvent", {}, arguments); };
    AppCenterAnalytics.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterAnalytics.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterAnalytics.pluginName = "AppCenterAnalytics";
    AppCenterAnalytics.plugin = "cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.pluginRef = "AppCenter.Analytics";
    AppCenterAnalytics.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-analytics";
    AppCenterAnalytics.platforms = ["Android", "iOS"];
AppCenterAnalytics.ɵfac = /*@__PURE__*/ function () { var ɵAppCenterAnalytics_BaseFactory; return function AppCenterAnalytics_Factory(t) { return (ɵAppCenterAnalytics_BaseFactory || (ɵAppCenterAnalytics_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AppCenterAnalytics)))(t || AppCenterAnalytics); }; }();
AppCenterAnalytics.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AppCenterAnalytics, factory: function (t) { return AppCenterAnalytics.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppCenterAnalytics, [{
        type: Injectable
    }], null, null); })();
    return AppCenterAnalytics;
}(AwesomeCordovaNativePlugin));
export { AppCenterAnalytics };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcGx1Z2lucy9hcHAtY2VudGVyLWFuYWx5dGljcy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7QUFDNUY7QUFNQSxJQW1Dd0Msc0NBQTBCO0FBQUM7QUFFdkM7QUFDNEM7QUFBTSxJQVE1RSx1Q0FBVSxhQUFDLFNBQWlCLEVBQUUsVUFBcUI7QUFLckMsSUFLZCxzQ0FBUztBQUthLElBTXRCLHVDQUFVLGFBQUMsWUFBcUI7QUFJYjtBQUEwRDtBQUFzRTtBQUEwRDtBQUFtSTtzREFyQ2pWLFVBQVU7Ozs7MEJBQ0w7QUFBQyw2QkEzQ1A7QUFBRSxFQTJDc0MsMEJBQTBCO0FBQ2pFLFNBRFksa0JBQWtCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmluZ01hcCB7XG4gIFtzOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQXBwIENlbnRlciBBbmFseXRpY3NcbiAqIEBkZXNjcmlwdGlvblxuICogQXBwIENlbnRlciBBbmFseXRpY3MgaGVscHMgeW91IHVuZGVyc3RhbmQgdXNlciBiZWhhdmlvciBhbmQgY3VzdG9tZXIgZW5nYWdlbWVudCB0byBpbXByb3ZlIHlvdXIgYXBwLlxuICogVGhlIFNESyBhdXRvbWF0aWNhbGx5IGNhcHR1cmVzIHNlc3Npb24gY291bnQgYW5kIGRldmljZSBwcm9wZXJ0aWVzIGxpa2UgbW9kZWwsIE9TIHZlcnNpb24sIGV0Yy5cbiAqIFlvdSBjYW4gZGVmaW5lIHlvdXIgb3duIGN1c3RvbSBldmVudHMgdG8gbWVhc3VyZSB0aGluZ3MgdGhhdCBtYXR0ZXIgdG8geW91LlxuICogQWxsIHRoZSBpbmZvcm1hdGlvbiBjYXB0dXJlZCBpcyBhdmFpbGFibGUgaW4gdGhlIEFwcCBDZW50ZXIgcG9ydGFsIGZvciB5b3UgdG8gYW5hbHl6ZSB0aGUgZGF0YS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2FwcGNlbnRlci9zZGsvYW5hbHl0aWNzL2NvcmRvdmFcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQXBwQ2VudGVyQW5hbHl0aWNzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FwcC1jZW50ZXItYW5hbHl0aWNzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ2VudGVyQW5hbHl0aWNzOiBBcHBDZW50ZXJBbmFseXRpY3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuYXBwQ2VudGVyQW5hbHl0aWNzLnNldEVuYWJsZWQodHJ1ZSkudGhlbigoKSA9PiB7XG4gKiAgICB0aGlzLmFwcENlbnRlckFuYWx5dGljcy50cmFja0V2ZW50KCdNeSBFdmVudCcsIHsgVEVTVDogJ0hFTExPX1dPUkxEJyB9KS50aGVuKCgpID0+IHtcbiAqICAgICAgICBjb25zb2xlLmxvZygnQ3VzdG9tIGV2ZW50IHRyYWNrZWQnKTtcbiAqICAgIH0pO1xuICogfSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaW5nTWFwXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQXBwQ2VudGVyQW5hbHl0aWNzJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWFuYWx5dGljcycsXG4gIHBsdWdpblJlZjogJ0FwcENlbnRlci5BbmFseXRpY3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9hcHBjZW50ZXItc2RrLWNvcmRvdmEvdHJlZS9tYXN0ZXIvY29yZG92YS1wbHVnaW4tYXBwY2VudGVyLWFuYWx5dGljcycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBDZW50ZXJBbmFseXRpY3MgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUcmFja3MgYW4gY3VzdG9tIGV2ZW50LlxuICAgKiBZb3UgY2FuIHNlbmQgdXAgdG8gMjAwIGRpc3RpbmN0IGV2ZW50IG5hbWVzLiBBbHNvLCB0aGVyZSBpcyBhIG1heGltdW0gbGltaXQgb2YgMjU2IGNoYXJhY3RlcnMgcGVyIGV2ZW50IG5hbWVcbiAgICogYW5kIDY0IGNoYXJhY3RlcnMgcGVyIGV2ZW50IHByb3BlcnR5IG5hbWUgYW5kIGV2ZW50IHByb3BlcnR5IHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSAge1N0cmluZ01hcH0gcHJvcGVydGllcyBFdmVudCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB0cmFja0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBwcm9wZXJ0aWVzOiBTdHJpbmdNYXApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgQXBwIENlbnRlciBBbmFseXRpY3MgaXMgZW5hYmxlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBBcHAgQ2VudGVyIEFuYWx5dGljcyBhdCBydW50aW1lXG4gICAqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3VsZEVuYWJsZSBTZXQgdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEVuYWJsZWQoc2hvdWxkRW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=