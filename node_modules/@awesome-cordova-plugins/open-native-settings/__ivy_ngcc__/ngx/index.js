import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as ɵngcc0 from '@angular/core';
var OpenNativeSettings = /** @class */ (function (_super) {
    __extends(OpenNativeSettings, _super);
    function OpenNativeSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenNativeSettings.prototype.open = function (setting) { return cordova(this, "open", {}, arguments); };
    OpenNativeSettings.pluginName = "OpenNativeSettings";
    OpenNativeSettings.plugin = "cordova-open-native-settings";
    OpenNativeSettings.pluginRef = "cordova.plugins.settings";
    OpenNativeSettings.repo = "https://github.com/guyromb/Cordova-open-native-settings";
    OpenNativeSettings.platforms = ["Android", "iOS"];
OpenNativeSettings.ɵfac = /*@__PURE__*/ function () { var ɵOpenNativeSettings_BaseFactory; return function OpenNativeSettings_Factory(t) { return (ɵOpenNativeSettings_BaseFactory || (ɵOpenNativeSettings_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(OpenNativeSettings)))(t || OpenNativeSettings); }; }();
OpenNativeSettings.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpenNativeSettings, factory: function (t) { return OpenNativeSettings.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpenNativeSettings, [{
        type: Injectable
    }], null, null); })();
    return OpenNativeSettings;
}(AwesomeCordovaNativePlugin));
export { OpenNativeSettings };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcGx1Z2lucy9vcGVuLW5hdGl2ZS1zZXR0aW5ncy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7QUFDNUY7QUFJUyxJQThGK0Isc0NBQTBCO0FBQUM7QUFHbkU7QUFFb0I7QUFBTSxJQUd4QixpQ0FBSSxhQUFDLE9BQW1DO0FBSTFCO0FBQTBEO0FBQWdFO0FBQStEO0FBQXlGO3NEQWJqUyxVQUFVOzs7OzBCQUNMO0FBQUMsNkJBcEdQO0FBQUUsRUFvR3NDLDBCQUEwQjtBQUNqRSxTQURZLGtCQUFrQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBPcGVuIE5hdGl2ZSBTZXR0aW5nc1xuICogQGRlc2NyaXB0aW9uXG4gKiBQbHVnaW4gdG8gb3BlbiBuYXRpdmUgc2NyZWVucyBvZiBpT1MvYW5kcm9pZCBzZXR0aW5nc1xuICogQHVzYWdlXG4gKiBZb3UgY2FuIG9wZW4gYW55IG9mIHRoZXNlIHNldHRpbmdzOlxuICogYGBgXG4gKiAgXCJhYm91dFwiLCAvLyBpb3NcbiAqICBcImFjY2Vzc2liaWxpdHlcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJhY2NvdW50XCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiYWlycGxhbmVfbW9kZVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImFwblwiLCAvLyBhbmRyb2lkXG4gKiAgXCJhcHBsaWNhdGlvbl9kZXRhaWxzXCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiYXBwbGljYXRpb25fZGV2ZWxvcG1lbnRcIiwgLy8gYW5kcm9pZFxuICogIFwiYXBwbGljYXRpb25cIiwgLy8gYW5kcm9pZFxuICogIFwiYXV0b2xvY2tcIiwgLy8gaW9zXG4gKiAgXCJiYXR0ZXJ5X29wdGltaXphdGlvblwiLCAvLyBhbmRyb2lkXG4gKiAgXCJibHVldG9vdGhcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJjYXN0bGVcIiwgLy8gaW9zXG4gKiAgXCJjYXB0aW9uaW5nXCIsIC8vIGFuZHJvaWRcbiAqICBcImNhc3RcIiwgLy8gYW5kcm9pZFxuICogIFwiY2VsbHVsYXJfdXNhZ2VcIiwgLy8gaW9zXG4gKiAgXCJjb25maWd1cmF0aW9uX2xpc3RcIiwgLy8gaW9zXG4gKiAgXCJkYXRhX3JvYW1pbmdcIiwgLy8gYW5kcm9pZFxuICogIFwiZGF0ZVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImRpc3BsYXlcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJkcmVhbVwiLCAvLyBhbmRyb2lkXG4gKiAgXCJmYWNldGltZVwiLCAvLyBpb3NcbiAqICBcImhvbWVcIiwgLy8gYW5kcm9pZFxuICogIFwia2V5Ym9hcmRcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJrZXlib2FyZF9zdWJ0eXBlXCIsIC8vIGFuZHJvaWRcbiAqICBcImxvY2FsZVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwibG9jYXRpb25cIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcImxvY2F0aW9uc1wiLCAvLyBpb3NcbiAqIFwibWFuYWdlX2FsbF9hcHBsaWNhdGlvbnNcIiwgLy8gYW5kcm9pZFxuICogXCJtYW5hZ2VfYXBwbGljYXRpb25zXCIsIC8vIGFuZHJvaWRcbiAqIFwibWVtb3J5X2NhcmRcIiwgLy8gYW5kcm9pZFxuICogXCJtdXNpY1wiLCAvLyBpb3NcbiAqIFwibXVzaWNfZXF1YWxpemVyXCIsIC8vIGlvc1xuICogXCJtdXNpY192b2x1bWVcIiwgLy8gaW9zXG4gKiBcIm5ldHdvcmtcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcIm5pa2VfaXBvZFwiLCAvLyBpb3NcbiAqIFwibmZjc2hhcmluZ1wiLCAvLyBhbmRyb2lkXG4gKiBcIm5mY19wYXltZW50XCIsIC8vIGFuZHJvaWRcbiAqIFwibmZjX3NldHRpbmdzXCIsIC8vIGFuZHJvaWRcbiAqIFwibm90ZXNcIiwgLy8gaW9zXG4gKiBcIm5vdGlmaWNhdGlvbl9pZFwiLCAvLyBpb3NcbiAqIFwicGFzc2Jvb2tcIiwgLy8gaW9zXG4gKiBcInBob25lXCIsIC8vIGlvc1xuICogXCJwaG90b3NcIiwgLy8gaW9zXG4gKiBcInByaW50XCIsIC8vIGFuZHJvaWRcbiAqIFwicHJpdmFjeVwiLCAvLyBhbmRyb2lkXG4gKiBcInF1aWNrX2xhdW5jaFwiLCAvLyBhbmRyb2lkXG4gKiBcInJlc2V0XCIsIC8vIGlvc1xuICogXCJyaW5ndG9uZVwiLCAvLyBpb3NcbiAqIFwiYnJvd3NlclwiLCAvLyBpb3NcbiAqIFwic2VhcmNoXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzZWN1cml0eVwiLCAvLyBhbmRyb2lkXG4gKiBcInNldHRpbmdzXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzaG93X3JlZ3VsYXRvcnlfaW5mb1wiLFxuICogXCJzb3VuZFwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwic29mdHdhcmVfdXBkYXRlXCIsIC8vIGlvc1xuICogXCJzdG9yYWdlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzdG9yZVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwic3luY1wiLCAvLyBhbmRyb2lkXG4gKiBcInRldGhlcmluZ1wiLCAvLyBpb3NcbiAqIFwidHdpdHRlclwiLCAvLyBpb3NcbiAqIFwidG91Y2hcIiwgLy8gaW9zXG4gKiBcInVzYWdlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJ1c2VyX2RpY3Rpb25hcnlcIiwgLy8gYW5kcm9pZFxuICogXCJ2aWRlb1wiLCAvLyBpb3NcbiAqIFwidm9pY2VfaW5wdXRcIiwgLy8gYW5kcm9pZFxuICogXCJ2cG5cIiwgLy8gaW9zXG4gKiBcIndhbGxwYXBlclwiLCAvLyBpb3NcbiAqIFwid2lmaV9pcFwiLCAvLyBhbmRyb2lkXG4gKiBcIndpZmlcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcIndpcmVsZXNzXCIgLy8gYW5kcm9pZFxuICogIGBgYFxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgT3Blbk5hdGl2ZVNldHRpbmdzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL29wZW4tbmF0aXZlLXNldHRpbmdzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgb3Blbk5hdGl2ZVNldHRpbmdzOiBPcGVuTmF0aXZlU2V0dGluZ3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdPcGVuTmF0aXZlU2V0dGluZ3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLW9wZW4tbmF0aXZlLXNldHRpbmdzJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNldHRpbmdzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ndXlyb21iL0NvcmRvdmEtb3Blbi1uYXRpdmUtc2V0dGluZ3MnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3Blbk5hdGl2ZVNldHRpbmdzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogT3BlbnMgYSBzZXR0aW5nIGRpYWxvZ1xuICAgKlxuICAgKiBAcGFyYW0gc2V0dGluZyB7c3RyaW5nfGFycmF5fSBzZXR0aW5nIG5hbWVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgb3BlbihzZXR0aW5nOiBzdHJpbmcgfCBbc3RyaW5nLCBib29sZWFuXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=