import { __awaiter } from "tslib";
/**
 * Represents a single file entry from the cordova file plugin system.
 */
export class CordovaFileEntryApi {
    constructor(cordovaFile, baseCordovaDirectoryNameDelegate, directoryName, fileName) {
        this.cordovaFile = cordovaFile;
        this.baseCordovaDirectoryNameDelegate = baseCordovaDirectoryNameDelegate;
        this.directoryName = directoryName;
        this.fileName = fileName;
        this.targetBaseDirectory = null;
        this.targetDirectory = null;
        this.targetFile = null;
        this.targetFileMetadata = null;
    }
    static createCacheRotationFiles(cordovaFile, directory, filenames) {
        return CordovaFileEntryApi.createRotationFiles(cordovaFile, () => cordovaFile.cacheDirectory, directory, filenames);
    }
    static createRotationFiles(cordovaFile, baseDirectoryDelegate, directory, filenames) {
        return filenames.map(filename => new CordovaFileEntryApi(cordovaFile, baseDirectoryDelegate, directory, filename));
    }
    get baseCordovaDirectoryName() {
        return this.baseCordovaDirectoryNameDelegate();
    }
    getFileName() {
        return this.fileName;
    }
    getDirectoryName() {
        return this.directoryName;
    }
    toURL() {
        return this.targetFile ? this.targetFile.toURL() : '';
    }
    getSize() {
        return this.targetFileMetadata ? this.targetFileMetadata.size : 0;
    }
    getLastModificationTime() {
        return this.targetFileMetadata ? new Date(this.targetFileMetadata.modificationTime).getTime() : 0;
    }
    write(data, overwrite) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.targetDirectory)
                yield this.refresh();
            yield this.cordovaFile.writeFile(this.targetDirectory.toURL(), this.fileName, data, { append: !overwrite, replace: overwrite });
        });
    }
    read() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.targetDirectory)
                yield this.refresh();
            return this.cordovaFile.readAsArrayBuffer(this.targetDirectory.toURL(), this.fileName);
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            this.targetBaseDirectory = yield this.cordovaFile.resolveDirectoryUrl(this.baseCordovaDirectoryName);
            this.targetDirectory = yield this.cordovaFile.getDirectory(this.targetBaseDirectory, this.directoryName, { create: true });
            this.targetFile = yield this.cordovaFile.getFile(this.targetDirectory, this.fileName, { create: true });
            this.targetFileMetadata = yield (new Promise((resolve, reject) => this.targetFile.getMetadata(resolve, reject)));
        });
    }
}
