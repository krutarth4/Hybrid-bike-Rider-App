import { __awaiter } from "tslib";
const CACHE_DIRECTORY = 'CACHE';
const ASCII_ENCODING = 'ascii';
/**
 * Represents a single file entry from the capacitor file plugin system.
 */
export class CapacitorFileEntryApi {
    constructor(capacitorFilesystem, directory, filePath) {
        this.capacitorFilesystem = capacitorFilesystem;
        this.directory = directory;
        this.filePath = filePath;
        this.mModifiedTime = 0;
        this.mSize = 0;
        this.mUri = null;
    }
    static createCacheRotationFiles(capacitorFilesystem, rotationFilesDirectory, filenames) {
        return CapacitorFileEntryApi.createRotationFiles(capacitorFilesystem, CACHE_DIRECTORY, rotationFilesDirectory, filenames);
    }
    static createRotationFiles(capacitorFilesystem, rootDirectory, rotationFilesDirectory, filenames) {
        return filenames.map(fileName => new CapacitorFileEntryApi(capacitorFilesystem, rootDirectory, `${rotationFilesDirectory}/${fileName}`));
    }
    getFileName() {
        return this.filePath;
    }
    getDirectoryName() {
        return this.directory;
    }
    toURL() {
        return this.mUri;
    }
    getSize() {
        return this.mSize;
    }
    getLastModificationTime() {
        return this.mModifiedTime;
    }
    read() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.capacitorFilesystem.readFile({
                directory: this.directory,
                path: this.filePath,
                encoding: ASCII_ENCODING
            });
            return new TextEncoder().encode(data).buffer;
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const { mtime, size, uri } = yield this.capacitorFilesystem.stat({
                directory: this.directory,
                path: this.filePath
            }).catch(() => ({
                mtime: 0,
                size: 0,
                uri: ''
            }));
            this.mModifiedTime = mtime;
            this.mSize = size;
            this.mUri = uri;
        });
    }
    write(bufferData, overwrite) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.refresh();
            const data = new TextDecoder().decode(bufferData);
            if (overwrite || this.mSize <= 0) {
                yield this.overwriteFileData(data);
            }
            else {
                yield this.appendFileData(data);
            }
        });
    }
    appendFileData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.capacitorFilesystem.appendFile({
                directory: this.directory,
                path: this.filePath,
                encoding: ASCII_ENCODING,
                data
            });
        });
    }
    overwriteFileData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const { uri } = yield this.capacitorFilesystem.writeFile({
                directory: this.directory,
                path: this.filePath,
                encoding: ASCII_ENCODING,
                recursive: true,
                data
            });
            this.mUri = uri;
        });
    }
}
