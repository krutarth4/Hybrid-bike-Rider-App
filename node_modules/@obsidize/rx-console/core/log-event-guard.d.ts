import { LogEvent, LogEventFilterPredicate } from './log-event';
/**
 * Configuration option for more granular control of guards.
 */
export declare const enum LogEventGuardMode {
    /**
     * Standard mode that delegates filtering to the filter function.
     */
    DEFAULT = 0,
    /**
     * Override mode that ignores the filter function and allows
     * all events to pass through.
     */
    ACCEPT_ALL = 1,
    /**
     * Override mode that ignores the filter function and prevents
     * all events from passing through.
     */
    BLOCK_ALL = 2
}
/**
 * Gate-keeping mechanism for log events.
 * The primary entry point is the `accepts()` method.
 */
export declare class LogEventGuard {
    private mFilter;
    mode: LogEventGuardMode;
    /**
     * Currently set filter function.
     * Defaults to `tautology` and performs no event suppression.
     */
    get filter(): LogEventFilterPredicate;
    set filter(value: LogEventFilterPredicate | null);
    setFilter(value: LogEventFilterPredicate | null): this;
    setMode(mode: LogEventGuardMode): this;
    /**
     * Returns true if this guard accepts the given event based
     * only on its current filter function (mode is ignored).
     */
    filterAccepts(ev: LogEvent): boolean;
    /**
     * Returns true if this guard accepts the given event based
     * on its current mode and filter function.
     */
    accepts(ev: LogEvent): boolean;
}
