import { EventEmitter } from './event-emitter';
import { broadcastLogEvent } from './log-event';
import { LogEventGuardContext } from './log-event-guard-context';
import { LogEventBuffer } from './log-event-buffer';
/**
 * Core mechanism that allows many `Logger` instances to report back to a shared resource.
 *
 * Primary entrypoints:
 * - `events()` - the shared `EventEmitter` of this tranport
 * - `setFilter(...)` - determines which events get emitted
 * - `setDefaultBroadcastEnabled(...)` - toggles global `console` variable usage
 *
 * NOTE: Call `disableEventCaching()` to revert to v5.x non-event-caching behavior.
 */
export class LoggerTransport extends LogEventGuardContext {
    constructor() {
        super(...arguments);
        this.mEvents = new EventEmitter();
        this.mInterceptProxy = this.send.bind(this);
        this.mDefaultBroadcastDelegate = broadcastLogEvent;
        /**
         * Data source responsible for producing new events, or
         * recycling previously created ones.
         */
        this.buffer = new LogEventBuffer();
    }
    events() {
        return this.mEvents;
    }
    disableEventCaching() {
        this.buffer.capacity = 0;
        return this;
    }
    pipeTo(other) {
        if (other !== this)
            this.mEvents.addListener(other.mInterceptProxy);
        return this;
    }
    unpipeFrom(other) {
        this.mEvents.removeListener(other.mInterceptProxy);
        return this;
    }
    pipeToDefault() {
        return this.pipeTo(getPrimaryLoggerTransport());
    }
    unpipeFromDefault() {
        return this.unpipeFrom(getPrimaryLoggerTransport());
    }
    isDefaultBroadcastEnabled() {
        return this.mEvents.hasListener(this.mDefaultBroadcastDelegate);
    }
    enableDefaultBroadcast() {
        this.mEvents.addListener(this.mDefaultBroadcastDelegate);
        return this;
    }
    disableDefaultBroadcast() {
        this.mEvents.removeListener(this.mDefaultBroadcastDelegate);
        return this;
    }
    setDefaultBroadcastEnabled(enabled) {
        return enabled
            ? this.enableDefaultBroadcast()
            : this.disableDefaultBroadcast();
    }
    /**
     * Default creator function used by the `Logger` class.
     */
    createEvent(level, context, message, params) {
        return this.buffer.get(level, context, message, params);
    }
    /**
     * If the transport can accept the given event, sends the event
     * to all listeners in the `events()` EventEmitter instance.
     * If the event is _not_ accepted, this does nothing.
     */
    send(ev) {
        if (this.accepts(ev))
            this.mEvents.emit(ev);
    }
}
let mDefaultTransport = undefined;
/**
 * Root level transport used by all `Logger` instances by default.
 *
 * Defined as a getter function rather than as a static property on `LoggerTransport`
 * to avoid potential conflicts with static members in sub-classes of `LoggerTransport`.
 */
export function getPrimaryLoggerTransport() {
    if (mDefaultTransport === undefined)
        mDefaultTransport = new LoggerTransport();
    return mDefaultTransport;
}
