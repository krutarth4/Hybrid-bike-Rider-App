import { callConsoleDynamic } from './console';
import { LogLevelNameMap } from './log-level-name-map';
import { stringifyAndJoin } from './utility';
/**
 * Serializes the given log event, using all values except for `params`.
 */
export function stringifyLogEventBaseValues(ev) {
    if (!ev)
        return (ev + '');
    const { tag, level, message, timestamp } = ev;
    const timestampJson = new Date(timestamp).toJSON();
    const levelStr = LogLevelNameMap.main.get(level);
    return `${timestampJson} [${levelStr}] [${tag}] ${message}`;
}
/**
 * Serializes the given log event, using all values (including `params`).
 * Note that the default behavior for `params` serialization is to
 * stringify and truncate each value past a certain threshold.
 *
 * For more details on how `params` is serialized,
 * see the `stringifyAndJoin` utility function.
 */
export function stringifyLogEvent(ev) {
    if (!ev)
        return (ev + '');
    const baseMessage = stringifyLogEventBaseValues(ev);
    const paramsStr = stringifyAndJoin(ev.params);
    return baseMessage + paramsStr;
}
/**
 * Serializes the given event and passes it onto the target console-like object.
 *
 * The default serializer only performs partial serialization excluding `params`,
 * and delegates handling of `params` to the console-like object.
 *
 * The default console-like target is the global `console` object.
 */
export function broadcastLogEvent(ev, serialize = stringifyLogEventBaseValues, target = console) {
    callConsoleDynamic(target, ev.level, serialize(ev), ev.params);
}
/**
 * Base class for values that get generated by `Logger` instances.
 *
 * NOTE: this class should be considered read-only, and its
 * fields should not be mutated directly. The caching system
 * in this module expects that event instances will not be
 * mutated by external sources.
 */
export class LogEvent {
    constructor(level, tag, message, params, timestamp) {
        this.initialize(level, tag, message, params, timestamp);
    }
    /**
     * Convenience api akin to JSON.stringify().
     */
    static stringify(ev, ignoreParams) {
        return ignoreParams ? stringifyLogEventBaseValues(ev) : stringifyLogEvent(ev);
    }
    toString(ignoreParams) {
        return LogEvent.stringify(this, ignoreParams);
    }
    /**
     * Used by the caching system to recycle existing event instances.
     * It is not recommended to use this directly.
     */
    initialize(level, tag, message, params = undefined, timestamp = Date.now()) {
        this.level = level;
        this.tag = tag;
        this.message = message;
        this.params = params;
        this.timestamp = timestamp;
    }
}
