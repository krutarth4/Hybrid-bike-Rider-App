import { isFunction, tautology } from './utility';
/**
 * Gate-keeping mechanism for log events.
 * The primary entry point is the `accepts()` method.
 */
export class LogEventGuard {
    constructor() {
        this.mFilter = tautology;
        this.mode = 0 /* LogEventGuardMode.DEFAULT */;
    }
    /**
     * Currently set filter function.
     * Defaults to `tautology` and performs no event suppression.
     */
    get filter() {
        return this.mFilter;
    }
    set filter(value) {
        this.mFilter = isFunction(value) ? value : tautology;
    }
    setFilter(value) {
        this.filter = value;
        return this;
    }
    setMode(mode) {
        this.mode = mode;
        return this;
    }
    /**
     * Returns true if this guard accepts the given event based
     * only on its current filter function (mode is ignored).
     */
    filterAccepts(ev) {
        return !!this.mFilter(ev);
    }
    /**
     * Returns true if this guard accepts the given event based
     * on its current mode and filter function.
     */
    accepts(ev) {
        switch (this.mode) {
            case 1 /* LogEventGuardMode.ACCEPT_ALL */:
                return true;
            case 2 /* LogEventGuardMode.BLOCK_ALL */:
                return false;
            default:
                return this.filterAccepts(ev);
        }
    }
}
