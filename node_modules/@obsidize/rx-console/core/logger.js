import { LogLevel } from './log-level';
import { getPrimaryLoggerTransport } from './logger-transport';
import { LogEventGuardContext } from './log-event-guard-context';
/**
 * Stand-in for `console` object usage.
 *
 * Instead of calling console.log() / console.warn() / etc. and losing
 * the information immediately to the javascript runtime, this will
 * pack the information in the call into a `LogEvent`, which can then
 * have zero or more post-processing routines run on it, and be emitted
 * to zero or more event observers in the parent `LoggerTransport`.
 *
 * In general, there should be at least one new `Logger` instance per
 * file and / or scope in your project.
 */
export class Logger extends LogEventGuardContext {
    constructor(name, transport = getPrimaryLoggerTransport()) {
        super();
        this.name = name;
        this.transport = transport;
    }
    use(transport) {
        this.transport = transport;
        return this;
    }
    verbose(message, ...params) {
        this.emit(LogLevel.VERBOSE, message, params);
    }
    trace(message, ...params) {
        this.emit(LogLevel.TRACE, message, params);
    }
    debug(message, ...params) {
        this.emit(LogLevel.DEBUG, message, params);
    }
    log(message, ...params) {
        this.emit(LogLevel.DEBUG, message, params);
    }
    info(message, ...params) {
        this.emit(LogLevel.INFO, message, params);
    }
    warn(message, ...params) {
        this.emit(LogLevel.WARN, message, params);
    }
    error(message, ...params) {
        this.emit(LogLevel.ERROR, message, params);
    }
    fatal(message, ...params) {
        this.emit(LogLevel.FATAL, message, params);
    }
    // default to using the transport's creator function
    // can be customized in sub-classes
    createEvent(level, message, params) {
        return this.transport.createEvent(level, this.name, message, params);
    }
    // can be customized in sub-classes
    emit(level, message, params) {
        const ev = this.createEvent(level, message, params);
        if (this.accepts(ev))
            this.transport.send(ev);
    }
}
