import { ConsoleLike } from './console';
import { LoggerTransport } from './logger-transport';
import { LogEventGuardContext } from './log-event-guard-context';
import { LogEvent } from './log-event';
/**
 * Stand-in for `console` object usage.
 *
 * Instead of calling console.log() / console.warn() / etc. and losing
 * the information immediately to the javascript runtime, this will
 * pack the information in the call into a `LogEvent`, which can then
 * have zero or more post-processing routines run on it, and be emitted
 * to zero or more event observers in the parent `LoggerTransport`.
 *
 * In general, there should be at least one new `Logger` instance per
 * file and / or scope in your project.
 */
export declare class Logger extends LogEventGuardContext implements ConsoleLike {
    readonly name: string;
    transport: LoggerTransport;
    constructor(name: string, transport?: LoggerTransport);
    use(transport: LoggerTransport): this;
    verbose(message: string, ...params: any[]): void;
    trace(message: string, ...params: any[]): void;
    debug(message: string, ...params: any[]): void;
    log(message: string, ...params: any[]): void;
    info(message: string, ...params: any[]): void;
    warn(message: string, ...params: any[]): void;
    error(message: string, ...params: any[]): void;
    fatal(message: string, ...params: any[]): void;
    protected createEvent(level: number, message: string, params: any[]): LogEvent;
    protected emit(level: number, message: string, params: any[]): void;
}
