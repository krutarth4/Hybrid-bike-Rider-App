import { ConsoleLike } from './console';
/**
 * General shape of a log event.
 * Minimal set of values required for LogEvent utility functions to work properly.
 */
export interface LogEventLike {
    readonly level: number;
    readonly tag: string;
    readonly message: string;
    readonly params: any[] | undefined;
    readonly timestamp: number;
}
export type LogEventAction = (ev: LogEventLike) => void;
export type LogEventSerializer = (ev: LogEventLike) => string;
export type LogEventFilterPredicate = (ev: LogEventLike) => boolean;
/**
 * Serializes the given log event, using all values except for `params`.
 */
export declare function stringifyLogEventBaseValues(ev: LogEventLike): string;
/**
 * Serializes the given log event, using all values (including `params`).
 * Note that the default behavior for `params` serialization is to
 * stringify and truncate each value past a certain threshold.
 *
 * For more details on how `params` is serialized,
 * see the `stringifyAndJoin` utility function.
 */
export declare function stringifyLogEvent(ev: LogEventLike): string;
/**
 * Serializes the given event and passes it onto the target console-like object.
 *
 * The default serializer only performs partial serialization excluding `params`,
 * and delegates handling of `params` to the console-like object.
 *
 * The default console-like target is the global `console` object.
 */
export declare function broadcastLogEvent(ev: LogEventLike, serialize?: LogEventSerializer, target?: ConsoleLike): void;
/**
 * Base class for values that get generated by `Logger` instances.
 *
 * NOTE: this class should be considered read-only, and its
 * fields should not be mutated directly. The caching system
 * in this module expects that event instances will not be
 * mutated by external sources.
 */
export declare class LogEvent implements LogEventLike {
    level: number;
    tag: string;
    message: string;
    params: any[] | undefined;
    timestamp: number;
    constructor(level: number, tag: string, message: string, params?: any[], timestamp?: number);
    /**
     * Convenience api akin to JSON.stringify().
     */
    static stringify(ev: LogEventLike, ignoreParams?: boolean): string;
    toString(ignoreParams?: boolean): string;
    /**
     * Used by the caching system to recycle existing event instances.
     * It is not recommended to use this directly.
     */
    initialize(level: number, tag: string, message: string, params?: any[] | undefined, timestamp?: number): void;
}
