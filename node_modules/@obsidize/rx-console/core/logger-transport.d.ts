import { EventEmitter } from './event-emitter';
import { LogEvent } from './log-event';
import { LogEventGuardContext } from './log-event-guard-context';
import { LogEventBuffer } from './log-event-buffer';
/**
 * Core mechanism that allows many `Logger` instances to report back to a shared resource.
 *
 * Primary entrypoints:
 * - `events()` - the shared `EventEmitter` of this tranport
 * - `setFilter(...)` - determines which events get emitted
 * - `setDefaultBroadcastEnabled(...)` - toggles global `console` variable usage
 *
 * NOTE: Call `disableEventCaching()` to revert to v5.x non-event-caching behavior.
 */
export declare class LoggerTransport extends LogEventGuardContext {
    private readonly mEvents;
    private readonly mInterceptProxy;
    private readonly mDefaultBroadcastDelegate;
    /**
     * Data source responsible for producing new events, or
     * recycling previously created ones.
     */
    readonly buffer: LogEventBuffer;
    events(): EventEmitter<LogEvent>;
    disableEventCaching(): this;
    pipeTo(other: LoggerTransport): this;
    unpipeFrom(other: LoggerTransport): this;
    pipeToDefault(): this;
    unpipeFromDefault(): this;
    isDefaultBroadcastEnabled(): boolean;
    enableDefaultBroadcast(): this;
    disableDefaultBroadcast(): this;
    setDefaultBroadcastEnabled(enabled: boolean): this;
    /**
     * Default creator function used by the `Logger` class.
     */
    createEvent(level: number, context: string, message: string, params: any[]): LogEvent;
    /**
     * If the transport can accept the given event, sends the event
     * to all listeners in the `events()` EventEmitter instance.
     * If the event is _not_ accepted, this does nothing.
     */
    send(ev: LogEvent): void;
}
/**
 * Root level transport used by all `Logger` instances by default.
 *
 * Defined as a getter function rather than as a static property on `LoggerTransport`
 * to avoid potential conflicts with static members in sub-classes of `LoggerTransport`.
 */
export declare function getPrimaryLoggerTransport(): LoggerTransport;
