/**
 * placeholder that always returns true, used by default in
 * most filter functions for this module.
 */
export function tautology() {
    return true;
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function isString(value) {
    return typeof value === 'string';
}
export function isObject(value) {
    return typeof value === 'object' && value !== null;
}
export function isNumber(value) {
    return typeof value === 'number' && !Number.isNaN(value);
}
/**
 * Abbreviates the given string if it exceeds the target length.
 */
export function truncate(str, targetLength) {
    if (isString(str) && str.length > targetLength)
        return `${str.substring(0, targetLength)}...`;
    return str;
}
/**
 * Attempts to run `JSON.stringify()` on the given value,
 * and does a brute force string coersion on error.
 */
export function jsonStringifySafe(value) {
    try {
        return JSON.stringify(value);
    }
    catch (_a) {
        return value + '';
    }
}
/**
 * Performs `JSON.stringify()` on the given value, and truncates the result
 * if it exceeds the target maximum length.
 */
export function stringify(value, maxLength = 250) {
    return truncate(jsonStringifySafe(value), maxLength);
}
/**
 * Performs `stringify()` on all values, and joins
 * them together with the given separator.
 */
export function stringifyAndJoin(values, separator = ' :: ', maxLength) {
    if (Array.isArray(values) && values.length > 0) {
        const stringifiedValues = values.map(p => stringify(p, maxLength));
        return separator + stringifiedValues.join(separator);
    }
    return '';
}
